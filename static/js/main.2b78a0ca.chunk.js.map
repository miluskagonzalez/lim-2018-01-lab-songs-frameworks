{"version":3,"sources":["components/Artist.js","components/Tracklist.js","App.js","serviceWorker.js","index.js"],"names":["Artist","_ref","currentArtist","currentPhoto","react_default","a","createElement","react","index_es","component","alt","image","align","gutterBottom","variant","Tracklist","currentTracklist","updateLikeCount","map","_ref2","index","name","likeCount","key","color","type","onClick","icons_index_es","disabled","App","state","artists","currentPosition","orderByLikeCount","trackA","trackB","updateCurrentPosition","value","_this","setState","trackIndex","_this$state","artist","tracklist","_this2","this","fetch","then","response","json","Promise","all","concat","_ref3","track","toptracks","photo","_ref4","playcount","parseInt","sort","_this3","container","justify","length","item","xs","sm","md","lg","elevation","direction","alignItems","mini","aria-label","components_Artist","components_Tracklist","Component","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","typography","useNextVariants","console","log","ReactDOM","render","styles","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b78a0ca.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Card, CardMedia, Typography } from '@material-ui/core'\n\nconst Artist = ({ currentArtist, currentPhoto }) => (\n  <Fragment>\n    <Card>\n      <CardMedia\n        component='img'\n        alt={currentArtist}\n        image={currentPhoto}\n      />\n    </Card>\n    <Typography align='center' gutterBottom variant=\"h5\" component=\"h2\">\n      {currentArtist}\n    </Typography>\n  </Fragment>\n)\n\nexport default Artist","import React from 'react';\nimport { List, ListItem, ListItemText, IconButton, Typography } from '@material-ui/core';\nimport { Favorite, ThumbDownSharp } from '@material-ui/icons'\n\nconst Tracklist = ({ currentTracklist, updateLikeCount }) => (\n  <List>\n    {\n      currentTracklist\n        .map(({ name, likeCount }, index) => (\n          <ListItem key={name}>\n            <ListItemText>{name}</ListItemText>\n            <IconButton\n              color='primary'\n              type='button'\n              onClick={() => updateLikeCount(index, 1)}>\n              <Favorite />\n            </IconButton>\n            <IconButton\n              color='secondary'\n              type='button'\n              disabled={likeCount ? false : true}\n              onClick={() => updateLikeCount(index, -1)}>\n              <ThumbDownSharp />\n            </IconButton>\n            <Typography variant='body2'>{likeCount}</Typography>\n          </ListItem>\n        ))\n    }\n  </List>\n)\n\nexport default Tracklist","import React, { Component, Fragment } from 'react';\nimport { Paper, Grid, Typography, Button, CircularProgress } from '@material-ui/core';\nimport { NavigateBefore, NavigateNext } from '@material-ui/icons'\nimport Artist from './components/Artist';\nimport Tracklist from './components/Tracklist';\n\nclass App extends Component {\n  state = {\n    artists: [],\n    currentPosition: 0,\n  }\n  orderByLikeCount = (trackA, trackB) => trackB.likeCount - trackA.likeCount;\n\n  componentWillMount() {\n    fetch('https://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=bf70ca5a70d643d398b9c06827137ab0&format=json')\n      .then(response => response.json())\n      .then(({ artists: { artist } }) => Promise.all(artist\n        .map(({ image, name }) => fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${name}&api_key=bf70ca5a70d643d398b9c06827137ab0&format=json`)\n          .then(response => response.json())\n          .then(({ toptracks: { track } }) => ({\n            name,\n            photo: image[3]['#text'],\n            tracklist: track\n              .map(({ name, playcount }) => ({ name, likeCount: parseInt(playcount) }))\n              .sort(this.orderByLikeCount)\n          })))\n      ))\n      .then(artists => {\n        this.setState({\n          artists\n        })\n      })\n  }\n\n  updateCurrentPosition = (value) => {\n    this.setState({\n      currentPosition: this.state.currentPosition + value\n    })\n  }\n\n  updateLikeCount = (trackIndex, value) => {\n    const { artists, currentPosition } = this.state;\n    this.setState({\n      artists: artists.map((artist) => {\n        if (artists[currentPosition] === artist) artist.tracklist[trackIndex].likeCount += value\n        return artist\n      })\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <Typography variant='h2' align='center' color='primary' gutterBottom>\n            Ranking songs\n          </Typography>\n        </header>\n        <main>\n          <Grid container justify='center'>\n            {\n              this.state.artists.length\n                ? (\n                  <Grid item xs={12} sm={9} md={6} lg={5}>\n                    <Paper elevation={0}>\n                      <Grid container>\n                        <Grid item xs={12}>\n                          <Grid container direction='row' alignItems='center' justify='space-around'>\n                            <Grid item>\n                              <Button\n                                mini\n                                variant='fab'\n                                color='primary'\n                                aria-label='Before'\n                                onClick={() => this.updateCurrentPosition(-1)}\n                                disabled={this.state.currentPosition ? false : true}\n                              >\n                                <NavigateBefore />\n                              </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                              <Artist\n                                currentArtist={this.state.artists[this.state.currentPosition].name}\n                                currentPhoto={this.state.artists[this.state.currentPosition].photo}\n                              />\n                            </Grid>\n                            <Grid item>\n                              <Button\n                                mini\n                                variant='fab'\n                                color='primary'\n                                aria-label='Next'\n                                onClick={() => this.updateCurrentPosition(1)}\n                                disabled={\n                                  this.state.currentPosition === (this.state.artists.length - 1)\n                                    ? true\n                                    : false\n                                }\n                              >\n                                <NavigateNext />\n                              </Button>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <Tracklist\n                            currentTracklist={this.state.artists[this.state.currentPosition].tracklist}\n                            updateLikeCount={this.updateLikeCount}\n                          />\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Grid>\n                )\n                : <CircularProgress color='secondary' />\n            }\n          </Grid>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light'\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nconsole.log(theme)\n\nReactDOM.render(\n  (<MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}